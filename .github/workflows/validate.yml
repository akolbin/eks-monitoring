name: Post-Deployment Validation

on:
  workflow_run:
    workflows: ["Deploy to EKS"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod
      cluster_name:
        description: 'EKS cluster name'
        required: true
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["dev"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME

    - name: Check cluster health
      run: |
        echo "üîç Checking cluster health..."
        kubectl get nodes -o wide
        kubectl get componentstatuses
        kubectl top nodes || echo "Metrics server not ready yet"

    - name: Check monitoring namespace
      run: |
        echo "üîç Checking monitoring namespace..."
        kubectl get all -n monitoring
        kubectl get pvc -n monitoring
        kubectl get configmaps -n monitoring
        kubectl get secrets -n monitoring

    - name: Check logging namespace
      run: |
        echo "üîç Checking logging namespace..."
        kubectl get all -n logging
        kubectl get configmaps -n logging

    - name: Validate pod health
      run: |
        echo "üîç Validating pod health..."

        # Check Prometheus pods
        PROMETHEUS_PODS=$(kubectl get pods -n monitoring -l app.kubernetes.io/name=prometheus --no-headers | wc -l)
        if [ $PROMETHEUS_PODS -eq 0 ]; then
          echo "‚ùå No Prometheus pods found"
          exit 1
        fi

        # Check Grafana pods
        GRAFANA_PODS=$(kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana --no-headers | wc -l)
        if [ $GRAFANA_PODS -eq 0 ]; then
          echo "‚ùå No Grafana pods found"
          exit 1
        fi

        # Check Fluent Bit pods
        FLUENTBIT_PODS=$(kubectl get pods -n logging -l app.kubernetes.io/name=fluent-bit --no-headers | wc -l)
        if [ $FLUENTBIT_PODS -eq 0 ]; then
          echo "‚ùå No Fluent Bit pods found"
          exit 1
        fi

        echo "‚úÖ All monitoring components found"

  metrics-validation:
    name: Metrics Validation
    runs-on: ubuntu-latest
    needs: health-checks

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["dev"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME

    - name: Test Prometheus metrics collection
      run: |
        echo "üîç Testing Prometheus metrics collection..."

        # Port forward to Prometheus
        kubectl port-forward -n monitoring svc/monitoring-stack-kube-prom-prometheus 9090:9090 &
        PF_PID=$!
        sleep 15

        # Test basic metrics
        echo "Testing up metric..."
        curl -s "http://localhost:9090/api/v1/query?query=up" | jq '.data.result | length'

        echo "Testing node metrics..."
        curl -s "http://localhost:9090/api/v1/query?query=node_cpu_seconds_total" | jq '.data.result | length'

        echo "Testing kube-state-metrics..."
        curl -s "http://localhost:9090/api/v1/query?query=kube_pod_info" | jq '.data.result | length'

        # Cleanup
        kill $PF_PID

    - name: Test AlertManager
      run: |
        echo "üîç Testing AlertManager..."

        # Port forward to AlertManager
        kubectl port-forward -n monitoring svc/monitoring-stack-kube-prom-alertmanager 9093:9093 &
        PF_PID=$!
        sleep 10

        # Test AlertManager API
        curl -f http://localhost:9093/api/v1/status
        curl -f http://localhost:9093/api/v1/alerts

        # Cleanup
        kill $PF_PID

  dashboard-validation:
    name: Dashboard Validation
    runs-on: ubuntu-latest
    needs: health-checks

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["dev"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME

    - name: Test Grafana accessibility
      run: |
        echo "üîç Testing Grafana accessibility..."

        # Port forward to Grafana
        kubectl port-forward -n monitoring svc/monitoring-stack-grafana 3000:80 &
        PF_PID=$!
        sleep 15

        # Test Grafana health
        curl -f http://localhost:3000/api/health

        # Test Grafana API
        curl -f http://localhost:3000/api/datasources
        curl -f http://localhost:3000/api/dashboards/home

        # Cleanup
        kill $PF_PID

    - name: Validate data sources
      run: |
        echo "üîç Validating Grafana data sources..."

        # Port forward to Grafana
        kubectl port-forward -n monitoring svc/monitoring-stack-grafana 3000:80 &
        PF_PID=$!
        sleep 15

        # Get admin credentials
        ADMIN_PASSWORD=$(kubectl get secret -n monitoring monitoring-stack-grafana -o jsonpath="{.data.admin-password}" | base64 --decode)

        # Test data source connectivity
        curl -u admin:$ADMIN_PASSWORD -f http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up

        # Cleanup
        kill $PF_PID

  logging-validation:
    name: Logging Validation
    runs-on: ubuntu-latest
    needs: health-checks

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["dev"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME

    - name: Test Fluent Bit log collection
      run: |
        echo "üîç Testing Fluent Bit log collection..."

        # Check Fluent Bit pods are running
        kubectl get pods -n logging -l app.kubernetes.io/name=fluent-bit

        # Check Fluent Bit logs for errors
        kubectl logs -n logging -l app.kubernetes.io/name=fluent-bit --tail=100 | grep -i error || echo "No errors found"

        # Check Fluent Bit metrics
        kubectl port-forward -n logging svc/fluent-bit 2020:2020 &
        PF_PID=$!
        sleep 10

        curl -f http://localhost:2020/api/v1/metrics/prometheus

        # Cleanup
        kill $PF_PID

    - name: Validate CloudWatch log groups
      run: |
        echo "üîç Validating CloudWatch log groups..."

        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}

        # Check if log groups exist
        aws logs describe-log-groups --log-group-name-prefix "/aws/eks/$CLUSTER_NAME" --region ${{ env.AWS_REGION }}

        # Check recent log events
        LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/aws/eks/$CLUSTER_NAME" --region ${{ env.AWS_REGION }} --query 'logGroups[].logGroupName' --output text)

        for LOG_GROUP in $LOG_GROUPS; do
          echo "Checking log group: $LOG_GROUP"
          aws logs describe-log-streams --log-group-name "$LOG_GROUP" --region ${{ env.AWS_REGION }} --max-items 1
        done

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [metrics-validation, dashboard-validation, logging-validation]

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["dev"]') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@main
      with:
        role-to-assume: arn:aws:iam::836072596305:role/GitHub_Actions
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        CLUSTER_NAME=${{ github.event.inputs.cluster_name || format('eks-monitoring-{0}', matrix.environment) }}
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $CLUSTER_NAME

    - name: End-to-end monitoring test
      run: |
        echo "üîç Running end-to-end monitoring test..."

        # Deploy a test application
        kubectl create deployment test-app --image=nginx:latest --replicas=2
        kubectl expose deployment test-app --port=80 --target-port=80

        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/test-app

        # Generate some load
        kubectl run load-generator --image=busybox --rm -it --restart=Never -- /bin/sh -c "while true; do wget -q -O- http://test-app; sleep 1; done" &
        LOAD_PID=$!
        sleep 30

        # Check if metrics are being collected
        kubectl port-forward -n monitoring svc/monitoring-stack-kube-prom-prometheus 9090:9090 &
        PF_PID=$!
        sleep 10

        # Query for test app metrics
        curl -s "http://localhost:9090/api/v1/query?query=kube_deployment_status_replicas{deployment=\"test-app\"}" | jq '.data.result | length'

        # Cleanup
        kill $LOAD_PID || true
        kill $PF_PID
        kubectl delete deployment test-app
        kubectl delete service test-app
        kubectl delete pod load-generator || true

    - name: Validation summary
      run: |
        echo "‚úÖ All validation tests completed successfully!"
        echo "üìä Monitoring stack is healthy and operational"
        echo "üéØ Ready for production workloads"
